exit = 1
while (exit != '0'):
    print('Введите основание a - произвольное целое:')
    a = int(input())
    print('Введите m (проверяемое N) - нечетное натуральное):')
    m = int(input())

    #Вычисление НОД(a,m)
    first = a
    second = m
    while first != 0 and second != 0:
        if first > second:
            first %= second
        else:
            second %= first
    nod = first + second
    print('НОД введенных чисел равен',nod)

    #Вычисление символа Якоби:
    if (nod == 1):
        s = 0           #Обнуление переменной под знак.
        flag = 0        #Сигнал о том, что ответ не найден (обнуляем).
        if (a == 0):    #Если a символа Якоби (a/m) равен 0,
            answ = 0    #то символ Якоби равен нулю.
            flag = 1    #Ответ найден.

        else:
            x = a       #Заводим переменные x, y, s под a, m
            y = m       #и знак вычисляемого символа (a/m).
            s = 1
            if (a<0):                   #Если a - отрицательное число,
                x = -a                  #выносим (по свойству 4)
                s = (-1)**((m-1)//2)    #символ (-1/m) по формуле (свойство 2).

            while (flag == 0):
                t = 0   #Количество двоек, вынесенных из "числителя" символа.
                c = x % y               #Заменяем a остатком по модулю m
                x = c                   #в соответствии со свойством 1.
                if (x == 0):
                    answ = 1            #Если m делится на a, (a/m)=1
                    flag = 1            #Ответ найден.
                else:
                    while (x%2 == 0):   #Пока a четно, выносим (свойство 4)
                        x = x//2        #двойки, считаем их количество.
                        t = t+1
                    if (t%2==1):        #Четное количество двоек влияет на знак,
                        s = s*(-1)**((y**2-1)//8)   #для нечетного - по формуле
                                                    #(свойство 3).

                    #Имеем (a/m), где a, m - нечетные.
                    #Используем формулу (свойство 5) и перевернем символ Якоби,
                    #если мы не можем вычислить его по свойству 2, т.е. a! = 1.
                    if (x>1):
                        s = s * ((-1) **(((x - 1) // 2)*((y - 1) // 2)))
                        c = x
                        x = y
                        y = c
                    else:           #Иначе если a = 1, (a/m)=1.
                        flag = 1    #Вычисление окончено.
            answ = s
            #В переменной, отведенной под знак, лежит +1 или -1.
            #Это и будет являться ответом.

        print('(',a,'/',m,') = ',answ)  #Вывод результата.

    #Начало вычисления степени (левой части теста Соловея-Штрассена)
    if (nod == 1):
        deg = int((m-1)//2 )    #Степень, в которую нужно возвести основание a
        numdeg = [1]            #Массив под показатели степеней
        adeg = [a]              #Массив под значения степеней
        res = 1                 #Переменная под результат бинарного возведения
                                #в степень по модулю

        i = 1
        while ((numdeg[i-1])*2<deg):        #Создание массива a^(2^j), j = i+1
            numdeg.append(numdeg[i-1]*2)                  #Показатели степеней
            adeg.append((adeg[i - 1] * adeg[i - 1]) % m)    #Значения степеней
            i = i + 1

        i = i - 1
        while (deg>0):                      #Перемножение необходимых степеней
            if (deg >= numdeg[i]):
                deg = deg - numdeg[i]
                res = (res * adeg[i]) % m
            i = i - 1

        if (res > int((m-1)//2)):          #Поиск абсолютно наименьшего вычета
            res = res - m
        print(a,'^((',m,'-1)/2) = ',res,' mod ',m)

        #Сравнение результата возведения в степень и символа Якоби -
        #проверка условия критерия Эйлера
        if (res == answ):
            print('Число ', m,' является псевдопростым по основанию ',a,' (по критерию Эйлера).')
        else:
            print('Число ', m, ' является составным.')

    print('Для выхода введите 0, для новой итерации введите любой другой символ.')
    exit = input()
